name: Update README with Spotify (Serverless)

on:
  schedule:
    - cron: "*/10 * * * *" # Every 10 minutes
  workflow_dispatch: # Manual trigger button
  push:
    branches: [main]
    paths: [".github/workflows/spotify-readme.yml"] # Only when workflow changes

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Debug secrets (without exposing them)
        run: |
          echo "🔐 Checking if secrets are available..."
          if [ -n "${{ secrets.SPOTIFY_CLIENT_ID }}" ]; then
            echo "✅ SPOTIFY_CLIENT_ID is set"
          else
            echo "❌ SPOTIFY_CLIENT_ID is missing"
            exit 1
          fi

          if [ -n "${{ secrets.SPOTIFY_CLIENT_SECRET }}" ]; then
            echo "✅ SPOTIFY_CLIENT_SECRET is set"
          else
            echo "❌ SPOTIFY_CLIENT_SECRET is missing"
            exit 1
          fi

          if [ -n "${{ secrets.SPOTIFY_REFRESH_TOKEN }}" ]; then
            echo "✅ SPOTIFY_REFRESH_TOKEN is set"
          else
            echo "❌ SPOTIFY_REFRESH_TOKEN is missing"
            exit 1
          fi

      - name: 🎵 Get Spotify track (Serverless)
        id: spotify
        run: |
          echo "🎵 Getting access token from Spotify..."

          # Get fresh access token using refresh token
          TOKEN_RESPONSE=$(curl -s -X POST "https://accounts.spotify.com/api/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=refresh_token" \
            -d "refresh_token=${{ secrets.SPOTIFY_REFRESH_TOKEN }}" \
            -d "client_id=${{ secrets.SPOTIFY_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}")

          echo "Token response status: $(echo $TOKEN_RESPONSE | jq -r 'if .error then "ERROR: " + .error else "SUCCESS" end')"

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token // empty')

          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "❌ Failed to get access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          echo "✅ Access token obtained successfully"

          # Try to get currently playing track
          echo "🎵 Checking currently playing..."
          CURRENT_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://api.spotify.com/v1/me/player/currently-playing")

          CURRENT_HTTP_CODE=$(echo "$CURRENT_RESPONSE" | grep -o 'HTTPSTATUS:[0-9]*' | cut -d':' -f2)
          CURRENT_BODY=$(echo "$CURRENT_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')

          echo "Currently playing HTTP status: $CURRENT_HTTP_CODE"

          # Initialize variables
          TRACK_NAME="Nothing playing"
          ARTIST_NAME=""
          ALBUM_IMAGE="https://i.scdn.co/image/ab67616d0000b273ec61804d798b2c42fe23f7c3"
          IS_PLAYING="false"

          if [ "$CURRENT_HTTP_CODE" = "200" ] && [ -n "$CURRENT_BODY" ] && [ "$CURRENT_BODY" != "null" ]; then
            # Currently playing something
            CURRENT_TRACK_NAME=$(echo "$CURRENT_BODY" | jq -r '.item.name // empty')
            if [ -n "$CURRENT_TRACK_NAME" ] && [ "$CURRENT_TRACK_NAME" != "null" ]; then
              TRACK_NAME="$CURRENT_TRACK_NAME"
              ARTIST_NAME=$(echo "$CURRENT_BODY" | jq -r '.item.artists[0].name // ""')
              ALBUM_IMAGE=$(echo "$CURRENT_BODY" | jq -r '.item.album.images[0].url // "https://i.scdn.co/image/ab67616d0000b273ec61804d798b2c42fe23f7c3"')
              IS_PLAYING=$(echo "$CURRENT_BODY" | jq -r '.is_playing // false')
              echo "🎵 Currently playing: $TRACK_NAME by $ARTIST_NAME"
            fi
          fi

          # If nothing currently playing, get recently played
          if [ "$TRACK_NAME" = "Nothing playing" ]; then
            echo "🎵 Getting recently played..."
            RECENT_RESPONSE=$(curl -s \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://api.spotify.com/v1/me/player/recently-played?limit=1")

            RECENT_TRACK_NAME=$(echo "$RECENT_RESPONSE" | jq -r '.items[0].track.name // empty')
            if [ -n "$RECENT_TRACK_NAME" ] && [ "$RECENT_TRACK_NAME" != "null" ]; then
              TRACK_NAME="$RECENT_TRACK_NAME"
              ARTIST_NAME=$(echo "$RECENT_RESPONSE" | jq -r '.items[0].track.artists[0].name // ""')
              ALBUM_IMAGE=$(echo "$RECENT_RESPONSE" | jq -r '.items[0].track.album.images[0].url // "https://i.scdn.co/image/ab67616d0000b273ec61804d798b2c42fe23f7c3"')
              IS_PLAYING="false"
              echo "🎵 Recently played: $TRACK_NAME by $ARTIST_NAME"
            fi
          fi

          # If still nothing, use fallback
          if [ "$TRACK_NAME" = "Nothing playing" ]; then
            echo "🎵 Using TUYU fallback"
            TRACK_NAME="I'm getting on the bus to the other world, see ya!"
            ARTIST_NAME="TUYU"
            ALBUM_IMAGE="https://i.scdn.co/image/ab67616d0000b273ec61804d798b2c42fe23f7c3"
            IS_PLAYING="false"
          fi

          echo "📊 Final track data:"
          echo "  Track: '$TRACK_NAME'"
          echo "  Artist: '$ARTIST_NAME'"
          echo "  Playing: '$IS_PLAYING'"
          echo "  Image: '$ALBUM_IMAGE'"

          # Set outputs for next step
          echo "track_name=$TRACK_NAME" >> $GITHUB_OUTPUT
          echo "artist_name=$ARTIST_NAME" >> $GITHUB_OUTPUT
          echo "is_playing=$IS_PLAYING" >> $GITHUB_OUTPUT
          echo "album_image=$ALBUM_IMAGE" >> $GITHUB_OUTPUT

      - name: 📝 Update README
        id: update_readme
        run: |
          echo "📝 Updating README with track info..."
          echo "Arguments: '${{ steps.spotify.outputs.track_name }}' '${{ steps.spotify.outputs.artist_name }}' '${{ steps.spotify.outputs.is_playing }}' '${{ steps.spotify.outputs.album_image }}'"

          if [ ! -f "update-readme.js" ]; then
            echo "❌ update-readme.js not found!"
            exit 1
          fi

          # Run the update script and capture the exit code
          if node update-readme.js "${{ steps.spotify.outputs.track_name }}" "${{ steps.spotify.outputs.artist_name }}" "${{ steps.spotify.outputs.is_playing }}" "${{ steps.spotify.outputs.album_image }}"; then
            echo "readme_updated=true" >> $GITHUB_OUTPUT
          else
            # Exit code 0 from the script means "no update needed" (same song)
            echo "readme_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Commit and push changes
        if: steps.update_readme.outputs.readme_updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"

          # Check if there are changes
          if git diff --quiet README.md; then
            echo "🔄 No changes to README (content unchanged)"
            exit 0
          fi

          echo "✅ Changes detected, committing..."
          git add README.md
          git commit -m "🎵 Update Spotify: ${{ steps.spotify.outputs.track_name }} by ${{ steps.spotify.outputs.artist_name }}"
          git push

          echo "🎉 README updated and pushed successfully!"
